AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This stack creates a Lambda function and a CloudWatch rule. 
  The Lambda function will apply attach a permission boundary
  policy to a non-compliant role when a CloudWatch rule is triggered
  by an API call (iam:CreateRole or iam:UpdateAssumeRolePolicy)
  that created the non-compliant IAM role.
Parameters:
  LambdaRoleName:
    Type: String
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  LambdaFunctionName:
    Type: String
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  S3BucketName:
    Type: String
    Description: Name of the bucket where the Lambda function code is stored.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  S3Key:
    Type: String
    Description: Example of a S3 key - folderName/myLambdaFunction.zip
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  CloudWatchRuleName:
    Type: String
    MinLength: '1'
    ConstraintDescription: This parameter is required.
Resources:
  QuarantinePolicy:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.amazonaws.com/detect-non-compliant-roles-quarantine-policy.yml'
  LambdaFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.amazonaws.com/detect-non-compliant-roles-lambda-function.yml'
      Parameters:
        LambdaRoleName: !Ref LambdaRoleName
        LambdaFunctionName: !Ref LambdaFunctionName
        S3BucketName: !Ref S3BucketName
        S3Key: !Ref S3Key
  CloudWatchRule:
    Type: AWS::Events::Rule
    DependsOn: 'LambdaFunction'
    Properties: 
      Description: >-
        An Event to trigger a Lambda function to attach a permission
        boundary policy to non-compliant roles
      EventPattern:
        source:
          - 'aws.iam'
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - iam.amazonaws.com
          eventName:
            - CreateRole
            - UpdateAssumeRolePolicy
      Name: !Ref CloudWatchRuleName
      State: 'ENABLED'
      Targets: 
        - Arn: !GetAtt LambdaFunction.Outputs.LambdaFunctionArn
          Id: !Ref LambdaFunctionName
  PermissionsForCloudWatchToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn:
        Fn::GetAtt:
          - 'CloudWatchRule'
          - 'Arn'
