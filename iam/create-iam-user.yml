AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates an IAM user. There are three IAM policies
  attached to the user - one AWS managed policy, one customer managed
  policy and one inline policy. 

  Learning points: Join and Sub functions under the ManagedPolicyArns 
  section. The Sub function is simpler and more readable in this case. 
Resources:
  MyUser:
    Type: 'AWS::IAM::User'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/my_customer_managed_policy'
        - !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':policy/another_customer_managed_policy'
      UserName: demo-user

  InlinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Users:
      - !Ref MyUser
      PolicyName: demo-inline-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement: 
        - Sid: 'AllowIamKeyRotation'
          Effect: Allow
          Action:
          - 'iam:DeleteAccessKey'
          - 'iam:GetAccessKeyLastUsed'
          - 'iam:UpdateAccessKey'
          - 'iam:CreateAccessKey'
          - 'iam:ListAccessKeys'
          Resource:
          - !GetAtt MyUser.Arn
  
  ManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: demo-managed-policy
      Users: 
        - !Ref MyUser
      PolicyDocument:
        Version: '2012-10-17'
        Statement: 
        - Sid: 'AllowIamReadOnle'
          Effect: Allow
          Action:
          - 'iam:List*'
          - 'iam:Get*'
          Resource: '*'
 
  MyAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: 
        !Ref MyUser
Outputs:
  AccessKey:
    Value: !Ref MyAccessKey
    Description: 'AWS Access Key for user.'
  SecretKey:
    Value: !GetAtt MyAccessKey.SecretAccessKey
    Description: 'AWS Secret Key for user'